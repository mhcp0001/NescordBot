{
  "env": {
    "DISABLE_TELEMETRY": "1",
    "DISABLE_ERROR_REPORTING": "1",
    "DISABLE_BUG_COMMAND": "1"
  },
  "permissions": {
    "allow": [
      "Read(**)",
      "Write(src/**)",
      "Write(docs/**)",
      "Write(.tmp/**)",
      "Bash(cat **)",
      "Bash(find:*)",
      "Bash(gemini *)",
      "Bash(gh auth refresh:*)",
      "Bash(gh issue create:*)",
      "Bash(gh issue edit:*)",
      "Bash(gh issue list:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr view:*)",
      "Bash(git add:*)",
      "Bash(git checkout:*)",
      "Bash(git commit:*)",
      "Bash(git diff:*)",
      "Bash(git init:*)",
      "Bash(git log:*)",
      "Bash(git pull:*)",
      "Bash(git push:*)",
      "Bash(git status:*)",
      "Bash(head:*)",
      "Bash(kill *)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(npm install:*)",
      "Bash(pkill node*)",
      "Bash(pkill npm*)",
      "Bash(pkill jest*)",
      "Bash(pkill webpack*)",
      "Bash(pkill ts-node*)",
      "Bash(pkill nodemon*)",
      "Bash(pkill express*)",
      "Bash(pnpm install:*)",
      "Bash(pnpm run build:*)",
      "Bash(pnpm run test:*)",
      "Bash(pwd:*)",
      "Bash(rm .tmp/**)",
      "Bash(rm -rf .tmp/**)",
      "Bash(systemctl --user *)",
      "Bash(tail:*)",
      "Bash(tree:*)",
      "Bash(docker compose up -d --build:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_drag",
      "mcp__playwright__browser_hover",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_select_option",
      "mcp__playwright__browser_press_key",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_file_upload",
      "mcp__playwright__browser_handle_dialog",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_navigate_back",
      "mcp__playwright__browser_navigate_forward",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_pdf_save",
      "mcp__playwright__browser_network_requests",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_tab_list",
      "mcp__playwright__browser_tab_new",
      "mcp__playwright__browser_tab_select",
      "mcp__playwright__browser_tab_close",
      "mcp__playwright__browser_generate_playwright_test",
      "Bash(gh issue list:*)",
      "Bash(gh issue edit:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(npm run dev:*)",
      "Bash(gh repo view:*)",
      "Bash(gh label create:*)",
      "Bash(gh project list:*)",
      "Bash(gh project item-add:*)",
      "Bash(gh api graphql:*)",
      "Bash(gh issue view:*)",
      "Bash(gh issue close:*)",
      "Bash(poetry --version)",
      "Bash(poetry install:*)",
      "Bash(poetry run black:*)",
      "Bash(poetry run flake8:*)",
      "Bash(poetry run mypy:*)",
      "Bash(poetry run pytest:*)",
      "Bash(git fetch:*)",
      "Bash(gh label:*)",
      "Bash(gh api:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(grep:*)",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__list_dir",
      "mcp__serena__search_for_pattern",
      "mcp__serena__find_symbol",
      "mcp__serena__replace_symbol_body",
      "Bash(poetry lock:*)",
      "mcp__serena__activate_project",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__create_text_file",
      "mcp__serena__delete_lines",
      "mcp__serena__delete_memory",
      "mcp__serena__execute_shell_command",
      "mcp__serena__find_file",
      "mcp__serena__find_referencing_code_snippets",
      "mcp__serena__find_referencing_symbols",
      "mcp__serena__find_symbol",
      "mcp__serena__get_current_config",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__initial_instructions",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__insert_at_line",
      "mcp__serena__insert_before_symbol",
      "mcp__serena__list_dir",
      "mcp__serena__list_memories",
      "mcp__serena__onboarding",
      "mcp__serena__prepare_for_new_conversation",
      "mcp__serena__read_file",
      "mcp__serena__read_memory",
      "mcp__serena__remove_project",
      "mcp__serena__replace_lines",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__replace_regex",
      "mcp__serena__restart_language_server",
      "mcp__serena__search_for_pattern",
      "mcp__serena__summarize_changes",
      "mcp__serena__switch_modes",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__serena__write_memory",
      "Bash(poetry run pytest:*)",
      "Bash(poetry run black:*)",
      "Bash(poetry run mypy:*)",
      "Bash(poetry run isort:*)",
      "Bash(git add:*)",
      "WebFetch(domain:github.com)",
      "Bash(rm:*)",
      "Bash(gh pr edit:*)",
      "Bash(gh pr merge:*)",
      "mcp__serena__write_memory",
      "WebSearch",
      "Bash(poetry check:*)",
      "Bash(poetry run python:*)",
      "Bash(gh pr close:*)",
      "Bash(gh project item-list:*)",
      "Bash(gh project item-edit:*)",
      "mcp__gemini-yusukedev__gemini_chat_pro",
      "Bash(claude mcp:*)",
      "Bash(python:*)",
      "Bash(gh issue:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh run download:*)",
      "Bash(gh pr ready:*)",
      "Bash(poetry run coverage run:*)",
      "Bash(poetry run coverage:*)",
      "Bash(git config:*)",
      "mcp__github__list_issues",
      "mcp__gemini-yusukedev__gemini_chat_flash",
      "Bash(gh project:*)",
      "Bash(git merge:*)",
      "mcp__github__get_issue",
      "Bash(git stash:*)"
    ],
    "deny": [
      "Bash(> /etc/*)",
      "Bash(>> /etc/*)",
      "Bash(*:(){*)",
      "Bash(*fork*)",
      "Bash(cat **/.env*)",
      "Bash(cat .env*)",
      "Bash(chmod:*)",
      "Bash(chown:*)",
      "Bash(curl:*)",
      "Bash(dd:*)",
      "Bash(fdisk:*)",
      "Bash(git rebase:*)",
      "Bash(git reset:*)",
      "Bash(grep * .env*)",
      "Bash(head .env*)",
      "Bash(head **/.env*)",
      "Bash(iptables:*)",
      "Bash(kill 1)",
      "Bash(kill -9 1)",
      "Bash(killall *)",
      "Bash(less .env*)",
      "Bash(less **/.env*)",
      "Bash(mkfs.*:*)",
      "Bash(mongod:*)",
      "Bash(more .env*)",
      "Bash(more **/.env*)",
      "Bash(mysql:*)",
      "Bash(nc:*)",
      "Bash(npm remove:*)",
      "Bash(npm uninstall:*)",
      "Bash(parted:*)",
      "Bash(pkill ssh*)",
      "Bash(pkill systemd*)",
      "Bash(pkill init*)",
      "Bash(pkill kernel*)",
      "Bash(pkill docker*)",
      "Bash(pkill nginx*)",
      "Bash(pkill apache*)",
      "Bash(pkill mysql*)",
      "Bash(pkill postgres*)",
      "Bash(psql:*)",
      "Bash(rm -rf *)",
      "Bash(rm -rf /)",
      "Bash(rm -rf /*)",
      "Bash(rm -rf ~/*)",
      "Bash(rm /*)",
      "Bash(rm ~/*)",
      "Bash(service:*)",
      "Bash(sudo:*)",
      "Bash(systemctl restart *)",
      "Bash(systemctl stop *)",
      "Bash(systemctl start *)",
      "Bash(systemctl disable *)",
      "Bash(systemctl enable *)",
      "Bash(tail .env*)",
      "Bash(tail **/.env*)",
      "Bash(ufw:*)",
      "Bash(wget:*)",
      "Read(**/*key*)",
      "Read(**/*password*)",
      "Read(**/*secret*)",
      "Read(**/*token*)",
      "Read(**/.env*)",
      "Read(**/secrets/**)",
      "Read(*.env)",
      "Read(.env*)",
      "Read(id_ed25519)",
      "Read(id_rsa)",
      "Write(**/.env*)",
      "Write(**/secrets/**)",
      "Write(*.env)",
      "Write(.env*)"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "github",
    "context7",
    "playwright",
    "readability"
  ],
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "powershell -ExecutionPolicy Bypass -WindowStyle Hidden -File .claude/scripts/deny-check.ps1"
          }
        ]
      }
    ]
  }
}
