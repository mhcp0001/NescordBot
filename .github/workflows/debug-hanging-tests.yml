name: Debug Hanging Tests

on:
  workflow_dispatch:
  push:
    branches: [ feature/108-gemini-audio-migration ]

jobs:
  identify-hanging-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: List all test files
      run: |
        echo "=== All test files ==="
        poetry run pytest --collect-only -q 2>/dev/null | grep "::test_" | sort | tail -10
        echo "=== Total test count ==="
        poetry run pytest --collect-only -q 2>/dev/null | grep "::test_" | wc -l

  test-batch-1:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Set up test environment
      run: |
        mkdir -p data logs
        cp .env.example .env.test
        echo "DISCORD_TOKEN=test-token" >> .env.test
        echo "OPENAI_API_KEY=test-key" >> .env.test
        echo "GEMINI_API_KEY=test-gemini-key" >> .env.test

    - name: Run tests after test_whisper
      env:
        DISCORD_TOKEN: test-token
        OPENAI_API_KEY: test-key
        GEMINI_API_KEY: test-gemini-key
      run: |
        echo "=== Running tests that come after test_whisper ==="
        poetry run pytest -vvv --capture=no --timeout=30 --timeout-method=thread \
          tests/ -k "not test_whisper" \
          --ignore=tests/services/transcription/test_whisper.py \
          --ignore=tests/services/transcription/ \
          --collect-only | tail -20

  test-individual-files:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        test_file:
          - "tests/test_batch_processor.py"
          - "tests/test_persistent_queue.py"
          - "tests/test_git_operations.py"
          - "tests/test_github_auth.py"
          - "tests/test_obsidian_github_integration.py"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Set up test environment
      run: |
        mkdir -p data logs
        cp .env.example .env.test
        echo "DISCORD_TOKEN=test-token" >> .env.test
        echo "OPENAI_API_KEY=test-key" >> .env.test
        echo "GEMINI_API_KEY=test-gemini-key" >> .env.test

    - name: Run individual test file
      env:
        DISCORD_TOKEN: test-token
        OPENAI_API_KEY: test-key
        GEMINI_API_KEY: test-gemini-key
      run: |
        echo "=== Testing ${{ matrix.test_file }} ==="
        poetry run pytest -vvv --capture=no --timeout=30 --timeout-method=thread \
          ${{ matrix.test_file }} 2>&1 | tee test-output.log
        echo "=== Test completed ==="

    - name: Upload test output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-output-${{ strategy.job-index }}
        path: test-output.log

  find-last-5-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Find tests after specific point
      run: |
        echo "=== Finding last 5 tests in execution order ==="
        poetry run pytest --collect-only -q 2>/dev/null | grep "::test_" | tail -10
        echo ""
        echo "=== Tests in services/transcription ==="
        poetry run pytest --collect-only -q tests/services/transcription/ 2>/dev/null | grep "::test_"
        echo ""
        echo "=== Last tests alphabetically ==="
        poetry run pytest --collect-only -q 2>/dev/null | grep "::test_" | sort | tail -10
