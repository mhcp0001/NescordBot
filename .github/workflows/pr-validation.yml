name: PR Validation

permissions:
  contents: read

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-pr:
    name: Validate PR Requirements
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR description for issue reference
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            // Check for "Closes #number" pattern
            const hasCloseRef = /(?:Closes|closes|Fixes|fixes|Resolves|resolves)\s+#\d+/.test(body);

            if (!hasCloseRef) {
              core.setFailed(
                '‚ùå PR must include issue closure reference (e.g., "Closes #123") in the description.\n' +
                'See CLAUDE.md for GitHub management rules.'
              );
              return;
            }

            console.log('‚úÖ PR description contains proper issue reference');

      - name: Validate commit messages
        run: |
          echo "üîç Checking commit messages for issue references and format..."

          # Get all commits in this PR (excluding merge commits)
          commits=$(git log --no-merges --format="%H %s" origin/${{ github.base_ref }}..HEAD)

          if [ -z "$commits" ]; then
            echo "‚ùå No commits found in PR"
            exit 1
          fi

          echo "Found commits:"
          echo "$commits"
          echo ""

          # Check each commit message
          error_found=false
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              commit_hash=$(echo "$line" | cut -d' ' -f1)
              commit_msg=$(echo "$line" | cut -d' ' -f2-)

              echo "Checking: $commit_msg"

              # Check for conventional commit format with issue reference
              # Allow optional PR number after refs: (refs #123) or (refs #123) (#456)
              if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|test|chore)(\([a-zA-Z0-9_-]+\))?: .+ \(refs #[0-9]+\)( \(#[0-9]+\))?$'; then
                echo "‚ùå Commit message format error: $commit_msg"
                echo "   Required format: type(scope): description (refs #issue-number)"
                echo "   „ÉªTitle must be ‚â§72 characters"
                echo "   „ÉªMust include issue reference (refs #number)"
                echo "   „ÉªMust follow conventional commits format"
                error_found=true
              else
                # Check commit message length
                msg_length=${#commit_msg}
                if [ $msg_length -gt 72 ]; then
                  echo "‚ö†Ô∏è  Commit message too long ($msg_length chars): $commit_msg"
                  echo "   Consider shortening to ‚â§72 characters"
                  error_found=true
                else
                  echo "‚úÖ Valid format: $commit_msg"
                fi
              fi
            fi
          done <<< "$commits"

          if [ "$error_found" = true ]; then
            echo ""
            echo "‚ùå One or more commits have formatting issues."
            echo "All commits must follow the format: type(scope): description (refs #issue-number)"
            echo "Requirements:"
            echo "  „Éªtype: feat, fix, docs, style, refactor, test, chore"
            echo "  „Éªscope: optional module name (e.g., github, voice, admin)"
            echo "  „Éªdescription: Japanese description of changes"
            echo "  „Éªrefs: mandatory issue reference (refs #number)"
            echo "  „Éªlength: ‚â§72 characters total"
            echo ""
            echo "Examples:"
            echo "  feat(github): GitHub APIÁµ±Âêà„ÇíÂÆüË£Ö (refs #51)"
            echo "  fix(voice): Èü≥Â£∞Âá¶ÁêÜ„Çí‰øÆÊ≠£ (refs #52)"
            echo "  docs: README.md„ÇíÊõ¥Êñ∞ (refs #53)"
            echo ""
            echo "See CLAUDE.md for complete GitHub management rules."
            exit 1
          fi

          echo ""
          echo "‚úÖ All commit messages follow proper format and reference issues"

      - name: Check PR title format
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title;

            // Check for conventional commit format in title
            const conventionalPattern = /^(feat|fix|docs|style|refactor|test|chore)(\(\w+\))?: .+/;

            if (!conventionalPattern.test(title)) {
              core.setFailed(
                '‚ùå PR title must follow conventional commit format.\n' +
                'Expected: type(scope): description\n' +
                'Examples:\n' +
                '  feat(github): GitHub APIÁµ±Âêà„ÇíÂÆüË£Ö\n' +
                '  fix(voice): Èü≥Â£∞Âá¶ÁêÜ„Çí‰øÆÊ≠£\n' +
                '  docs: README.md„ÇíÊõ¥Êñ∞'
              );
              return;
            }

            console.log('‚úÖ PR title follows conventional commit format');

      - name: Validate branch name and PR target
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const headBranch = pr.head.ref;
            const baseBranch = pr.base.ref;

            console.log(`Branch: ${headBranch} ‚Üí ${baseBranch}`);

            // Check branch naming convention
            const validBranchPattern = /^(feature|fix|docs|refactor|test|chore)\/\d+-[\w-]+$/;

            if (!validBranchPattern.test(headBranch)) {
              core.setFailed(
                `‚ùå Branch name "${headBranch}" does not follow naming convention.\n` +
                'Required format: type/issue-number-description\n' +
                'Examples:\n' +
                '  feature/123-admin-commands\n' +
                '  fix/456-voice-api-error\n' +
                '  docs/789-update-readme\n' +
                '\nSee CLAUDE.md for complete branch strategy.'
              );
              return;
            }

            // Extract issue number from branch name for Phase integration check
            const issueMatch = headBranch.match(/\/(\d+)-/);
            const issueNumber = issueMatch ? parseInt(issueMatch[1]) : null;

            // Check PR target based on issue type and Phase integration strategy
            let expectedTarget = 'main'; // Default target

            // Phase 4 tasks should target feature/phase4
            if (issueNumber && issueNumber >= 95 && issueNumber <= 121) {
              expectedTarget = 'feature/phase4';
            }

            if (baseBranch !== expectedTarget) {
              let errorMsg = `‚ùå PR target "${baseBranch}" is incorrect for this branch.\n`;

              if (expectedTarget === 'feature/phase4') {
                errorMsg += `Phase 4 issues (#95-#121) must target "feature/phase4" branch.\n`;
                errorMsg += 'This follows Phase Integration Strategy for large feature development.\n';
              } else {
                errorMsg += `This branch should target "${expectedTarget}" branch.\n`;
              }

              errorMsg += '\nPhase Integration Strategy:\n';
              errorMsg += '1. Individual Issue ‚Üí Phase integration branch (feature/phaseX)\n';
              errorMsg += '2. Phase completion ‚Üí Main branch (feature/phaseX ‚Üí main)\n';
              errorMsg += '\nSee CLAUDE.md for complete workflow details.';

              core.setFailed(errorMsg);
              return;
            }

            console.log(`‚úÖ Branch name and PR target are valid: ${headBranch} ‚Üí ${baseBranch}`);

      - name: Summary
        run: |
          echo "üéâ All PR validation checks passed!"
          echo ""
          echo "‚úÖ PR description contains issue closure reference"
          echo "‚úÖ All commits contain issue references and follow format"
          echo "‚úÖ PR title follows conventional commit format"
          echo "‚úÖ Branch name follows naming convention"
          echo "‚úÖ PR targets correct branch per Phase Integration Strategy"
