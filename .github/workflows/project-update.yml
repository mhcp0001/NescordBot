name: Update Project Status

on:
  pull_request:
    types: [opened, closed]
  issues:
    types: [opened]
  push:
    branches: [feature/phase4]

env:
  PROJECT_ID: "PVT_kwHOAVzM6c4BAoYL"
  STATUS_FIELD_ID: "PVTSSF_lAHOAVzM6c4BAoYLzgzYKtg"
  TODO_ID: "f75ad846"
  IN_PROGRESS_ID: "47fc9ee4"
  READY_FOR_INTEGRATION_ID: "0ee8d97c"
  DONE_ID: "98236657"

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract issue number from PR, Issue, or Push
        id: extract-issue
        uses: actions/github-script@v7
        with:
          script: |
            let issueNumber = null;

            if (context.eventName === 'issues') {
              // Direct issue event
              issueNumber = context.payload.issue.number;
              console.log(`Direct issue event: #${issueNumber}`);
            } else if (context.eventName === 'pull_request') {
              // Extract from PR body or title
              const pr = context.payload.pull_request;
              const body = pr.body || '';
              const title = pr.title || '';

              // Look for "Closes #number", "refs #number" patterns
              const patterns = [
                /(?:Closes|closes|Fixes|fixes|Resolves|resolves)\s+#(\d+)/,
                /\(refs #(\d+)\)/,
                /#(\d+)/
              ];

              for (const pattern of patterns) {
                const match = body.match(pattern) || title.match(pattern);
                if (match) {
                  issueNumber = parseInt(match[1]);
                  console.log(`Found issue reference in ${match.input}: #${issueNumber}`);
                  break;
                }
              }
            } else if (context.eventName === 'push') {
              // Extract from commit messages in push event
              const commitMessage = context.payload.head_commit?.message || '';
              console.log(`Push event commit message: ${commitMessage}`);

              const patterns = [
                /\(refs #(\d+)\)/,
                /(?:Closes|closes|Fixes|fixes|Resolves|resolves)\s+#(\d+)/,
                /#(\d+)/
              ];

              for (const pattern of patterns) {
                const match = commitMessage.match(pattern);
                if (match) {
                  issueNumber = parseInt(match[1]);
                  console.log(`Found issue reference in commit: #${issueNumber}`);
                  break;
                }
              }
            }

            if (!issueNumber) {
              console.log('No issue number found, skipping project update');
              return { skip: true };
            }

            core.setOutput('issue-number', issueNumber);
            core.setOutput('skip', false);
            return { issueNumber, skip: false };

      - name: Get project item ID for issue
        if: steps.extract-issue.outputs.skip != 'true'
        id: get-item
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ steps.extract-issue.outputs.issue-number }};

            try {
              // GraphQL query to find the project item
              const query = `
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                            title
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const variables = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issueNumber: issueNumber
              };

              const result = await github.graphql(query, variables);
              const projectItems = result.repository.issue.projectItems.nodes;

              // Find our specific project
              const targetProjectId = process.env.PROJECT_ID;
              const projectItem = projectItems.find(item =>
                item.project.id === targetProjectId
              );

              if (!projectItem) {
                console.log(`Issue #${issueNumber} is not in target project ${targetProjectId}`);
                core.setOutput('skip', true);
                return;
              }

              console.log(`Found project item: ${projectItem.id} for issue #${issueNumber}`);
              core.setOutput('project-item-id', projectItem.id);
              core.setOutput('skip', false);

            } catch (error) {
              console.log(`Error finding project item: ${error.message}`);
              core.setOutput('skip', true);
            }

      - name: Update project status - Issue opened (Todo)
        if: github.event_name == 'issues' && github.event.action == 'opened' && steps.get-item.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {
                    singleSelectOptionId: $value
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = {
              projectId: process.env.PROJECT_ID,
              itemId: "${{ steps.get-item.outputs.project-item-id }}",
              fieldId: process.env.STATUS_FIELD_ID,
              value: process.env.TODO_ID
            };

            try {
              await github.graphql(mutation, variables);
              console.log(`✅ Updated issue #${{ steps.extract-issue.outputs.issue-number }} status to Todo`);
            } catch (error) {
              console.log(`❌ Failed to update status to Todo: ${error.message}`);
            }

      - name: Update project status - PR opened (In Progress)
        if: github.event_name == 'pull_request' && github.event.action == 'opened' && steps.get-item.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {
                    singleSelectOptionId: $value
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = {
              projectId: process.env.PROJECT_ID,
              itemId: "${{ steps.get-item.outputs.project-item-id }}",
              fieldId: process.env.STATUS_FIELD_ID,
              value: process.env.IN_PROGRESS_ID
            };

            try {
              await github.graphql(mutation, variables);
              console.log(`✅ Updated issue #${{ steps.extract-issue.outputs.issue-number }} status to In Progress`);
            } catch (error) {
              console.log(`❌ Failed to update status to In Progress: ${error.message}`);
            }

      - name: Update project status - PR merged to Phase4 (Ready for Integration)
        if: github.event_name == 'push' && github.ref == 'refs/heads/feature/phase4' && steps.get-item.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {
                    singleSelectOptionId: $value
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = {
              projectId: process.env.PROJECT_ID,
              itemId: "${{ steps.get-item.outputs.project-item-id }}",
              fieldId: process.env.STATUS_FIELD_ID,
              value: process.env.READY_FOR_INTEGRATION_ID
            };

            try {
              await github.graphql(mutation, variables);
              console.log(`✅ Updated issue #${{ steps.extract-issue.outputs.issue-number }} status to Ready for Integration`);
            } catch (error) {
              console.log(`❌ Failed to update status to Ready for Integration: ${error.message}`);
            }

      - name: Update project status - PR merged to Main (Done)
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' && steps.get-item.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: {
                    singleSelectOptionId: $value
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = {
              projectId: process.env.PROJECT_ID,
              itemId: "${{ steps.get-item.outputs.project-item-id }}",
              fieldId: process.env.STATUS_FIELD_ID,
              value: process.env.DONE_ID
            };

            try {
              await github.graphql(mutation, variables);
              console.log(`✅ Updated issue #${{ steps.extract-issue.outputs.issue-number }} status to Done`);
            } catch (error) {
              console.log(`❌ Failed to update status to Done: ${error.message}`);
            }

      - name: Summary
        if: steps.extract-issue.outputs.skip != 'true'
        run: |
          echo "🎉 Project status update completed!"
          echo "Issue #${{ steps.extract-issue.outputs.issue-number }}"
          echo "Project Item ID: ${{ steps.get-item.outputs.project-item-id }}"
          echo "Event: ${{ github.event_name }} - ${{ github.event.action }}"
          if [ "${{ github.event_name }}" = "issues" ] && [ "${{ github.event.action }}" = "opened" ]; then
            echo "Status updated: Todo"
          elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.action }}" = "opened" ]; then
            echo "Status updated: In Progress"
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/feature/phase4" ]; then
            echo "Status updated: Ready for Integration (Phase4 integration)"
          elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ] && [ "${{ github.event.pull_request.base.ref }}" = "main" ]; then
            echo "Status updated: Done (Main integration)"
          fi
