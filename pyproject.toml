[tool.poetry]
name = "nescordbot"
version = "1.0.0"
description = "Discord Bot with voice transcription and AI-powered features"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "nescordbot", from = "src"}]

[tool.poetry.scripts]
nescordbot = "nescordbot.main:main"

[tool.poetry.dependencies]
python = "^3.11"
discord-py = "^2.3.2"
python-dotenv = "^1.0.0"
openai = "^1.10.0"
pydub = "^0.25.1"
ffmpeg-python = "^0.2.0"
aiohttp = "^3.9.1"
numpy = "^1.24.3"
pandas = "^2.0.3"
psutil = "^5.9.5"
python-dateutil = "^2.8.2"
pytz = "^2023.3"
aiosqlite = "^0.19.0"
colorlog = "^6.8.0"
PyGithub = "^2.1.1"
GitPython = "^3.1.40"
pathvalidate = "^3.2.0"

[tool.poetry.group.dev.dependencies]
black = "^23.12.0"
flake8 = "^6.1.0"
pytest = "^7.4.4"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
mypy = "^1.8.0"
isort = "^5.13.2"
pre-commit = "^3.6.0"
bandit = {extras = ["toml"], version = "^1.7.5"}
safety = "^2.3.5"
ruff = "^0.12.9"
pytest-xdist = "^3.8.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
exclude = [
    "tests/",
    ".venv/",
    "build/",
    "dist/"
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "network: marks tests that require network access"
]

[tool.flake8]
max-line-length = 200
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info"
]

[tool.bandit]
exclude_dirs = ["tests", ".venv", "build", "dist"]
skips = ["B101"]  # Skip assert_used test

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/*/test_*.py",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]

[tool.ruff]
# Black compatible line length
line-length = 100

# Target Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable flake8 rules (F) and isort rules (I)
select = ["E", "F", "W", "I"]

# Ignore rules that conflict with Black or are too strict
ignore = ["E203", "E501"]

# Exclude directories
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["F401", "F811", "S101"]

[tool.ruff.format]
# Black compatible formatting
quote-style = "double"
