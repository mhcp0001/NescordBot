const { Client, GatewayIntentBits, Collection } = require('discord.js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Botクライアントの初期化
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates
    ]
});

// コマンドコレクションの初期化
client.commands = new Collection();

// コマンドファイルの読み込み
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    if ('data' in command && 'execute' in command) {
        client.commands.set(command.data.name, command);
    }
}

// Botが起動したときの処理
client.once('ready', () => {
    console.log(`✅ ${client.user.tag} が起動しました！`);
});

// メッセージを受信したときの処理
client.on('messageCreate', async (message) => {
    // Bot自身のメッセージは無視
    if (message.author.bot) return;

    // 音声メッセージの処理
    if (message.attachments.size > 0) {
        const attachment = message.attachments.first();
        if (attachment.contentType && attachment.contentType.startsWith('audio/')) {
            console.log('音声メッセージを検出しました:', attachment.url);
            // ここに音声処理のロジックを追加
        }
    }
});

// エラーハンドリング
client.on('error', error => {
    console.error('Discord client error:', error);
});

// Botにログイン
client.login(process.env.DISCORD_TOKEN);
